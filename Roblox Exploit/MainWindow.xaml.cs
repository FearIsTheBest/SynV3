using CefSharp;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace SynV3
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private bool _isDragging = false;
        private Point _startPoint;

        private editorWindow _editorWindow;
        public MainWindow()
        {
            Loaded += Border_Loaded;
            LocationChanged += MainWindow_LocationChanged;
            SizeChanged += MainWindow_SizeChanged;
            Closed += MainWindow_Closed;

            Opacity = 0;      //first the opacity is 0

            // Create a DispatcherTimer instance
            DispatcherTimer t1 = new DispatcherTimer();

            // Set the interval for the timer
            t1.Interval = TimeSpan.FromMilliseconds(10);  // 10ms interval

            // Attach the event handler for the Tick event
            t1.Tick += new EventHandler(fadeIn);

            // Start the timer
            t1.Start();
        }

        System.Timers.Timer t1 = new System.Timers.Timer();

        private void Border_Loaded(object sender, RoutedEventArgs e)
        {
            if (_editorWindow == null || !_editorWindow.IsVisible)
            {
                _editorWindow = new editorWindow
                {
                    Owner = this,
                    WindowStartupLocation = WindowStartupLocation.Manual,
                    ShowInTaskbar = false
                };

                // Position the editorWindow relative to MainWindow
                UpdateEditorWindowPosition();

                string currentDirectory = Directory.GetCurrentDirectory();
                string uri = string.Format("file:///{0}/Monaco/index.html", currentDirectory);
                _editorWindow.NavigateTo(uri);

                _editorWindow.Show();
            }
            else
            {
                // If already open, bring it to the front
                _editorWindow.Activate();
            }

            // Attach mouse event handlers
            this.MouseDown += Grid_MouseDown;
            this.MouseMove += Grid_MouseMove;
            this.MouseUp += Grid_MouseUp;

            


        }
        void fadeIn(object sender, EventArgs e)
        {
            if (Opacity >= 1)
                t1.Stop();   //this stops the timer if the form is completely displayed
            else
                Opacity += 0.05;
        }

        void fadeOut(object sender, EventArgs e)
        {
            if (Opacity <= 0)     //check if opacity is 0
            {
                t1.Stop();    //if it is, we stop the timer
                Close();   //and we try to close the form
            }
            else
                Opacity -= 0.05;
        }
        private void MainWindow_LocationChanged(object sender, EventArgs e)
        {
            UpdateEditorWindowPosition();
        }

        private void MainWindow_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            UpdateEditorWindowPosition();
        }

        private void MainWindow_Closed(object sender, EventArgs e)
        {
            _editorWindow.Close(); // Close editorWindow when MainWindow closes
        }

        private void UpdateEditorWindowPosition()
        {
            if (_editorWindow != null)
            {
                _editorWindow.Left = this.Left + 10; // Adjust as needed
                _editorWindow.Top = this.Top + 10;   // Adjust as needed
            }
        }

        private void Close_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void Maximize_Click(object sender, RoutedEventArgs e)
        {
            if (this.WindowState == WindowState.Normal)
            {
                this.WindowState = WindowState.Maximized;
            }
            else
            {
                this.WindowState = WindowState.Normal;
            }
        }

        private void Minimize_Click(object sender, RoutedEventArgs e)
        {
            this.WindowState = WindowState.Minimized;
        }

        private void SaveFile_Click(object sender, RoutedEventArgs e)
        {
            SaveFileDialog dialog = new SaveFileDialog();
            dialog.Filter = "Txt Files (*.txt|*.txt|Lua Files (*.lua)|*.lua|All Files (*.*)|*.*";

            if (dialog.ShowDialog() == true)
            {
                string content = _editorWindow.editor.EvaluateScriptAsync("getValue").ToString();
                File.WriteAllText(dialog.FileName, content);
            }
        }

        private void ExecuteFile_Click(object sender, RoutedEventArgs e)
        {

        }

        private void OpenFile_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = "Txt Files (*.txt|*.txt|Lua Files (*.lua)|*.lua|All Files (*.*)|*.*";

            if (dialog.ShowDialog() == true)
            {
                string script = File.ReadAllText(dialog.FileName);
                _editorWindow.editor.ExecuteScriptAsync("setValue", script);
            }
        }

        private void ClearFile_Click(object sender, RoutedEventArgs e)
        {
            _editorWindow.editor.ExecuteScriptAsync("setValue", "");
        }

        private void Grid_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.LeftButton == MouseButtonState.Pressed)
            {
                _isDragging = true;
                this.DragMove(); // Move the MainWindow
            }
        }

        private void Grid_MouseMove(object sender, MouseEventArgs e)
        {
            if (_isDragging)
            {
                UpdateEditorWindowPosition(); // Update EditorWindow position while dragging
            }
        }

        private void Grid_MouseUp(object sender, MouseButtonEventArgs e)
        {
            _isDragging = false; // Stop dragging
        }
    }
}
